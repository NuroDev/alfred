version: '3'

networks:
    alfred:
        external: false

services:
    # Docker Metrics
    cadvisor:
        image: 'google/cadvisor:latest'
        container_name: cadvisor
        restart: always
        networks:
            - alfred
        ports:
            - '8080:8080'
        volumes:
            - '/:/rootfs:ro'
            - '/var/run:/var/run:rw'
            - '/sys:/sys:ro'
            - '/var/lib/docker/:/var/lib/docker:ro'
        labels:
            - 'traefik.frontend.rule=Host:cadvisor.${DOMAIN}'

    # Monitoring Dashboard
    grafana:
        image: 'grafana/grafana:latest'
        container_name: grafana
        restart: always
        networks:
            - alfred
        ports:
            - '3000:3000'
        volumes:
            - '${CONFIG_DIR}/grafana:/var/lib/grafana'
            - '${CONFIG_DIR}/grafana/provisioning/:/etc/grafana/provisioning'
        environment:
            - 'GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel'
        depends_on:
            - cadvisor
            - node_exporter
            - prometheus
        labels:
            - 'traefik.frontend.rule=Host:monitoring.${DOMAIN}'

    # Stack Manager
    heimdall:
        image: 'linuxserver/heimdall:latest'
        container_name: heimdall
        restart: always
        networks:
            - alfred
        ports:
            - '81:80'
            - '444:443'
        environment:
            - 'PUID=${USER_UID}'
            - 'PGID=${USER_GID}'
            - 'TZ=Europe/London'
        volumes:
            - '${CONFIG_DIR}/heimdall:/config'
        labels:
            - 'traefik.frontend.rule=Host:${DOMAIN},manager.${DOMAIN}'

    # System Metrics
    node_exporter:
        image: 'napnap75/rpi-prometheus:node_exporter'
        container_name: node_exporter
        restart: always
        command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points'
            - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
        networks:
            - alfred
        ports:
            - '9100:9100'
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
            - '/:/rootfs:ro'
        labels:
            - 'traefik.frontend.rule=Host:metrics.${DOMAIN}'

    # Pi-Hole DNS
    pihole:
        image: 'pihole/pihole:latest'
        container_name: pihole
        restart: always
        ports:
            - '53:53/tcp'
            - '53:53/udp'
            - '67:67/udp'
            - '8181:80/tcp'
        environment:
            - 'DNS1=1.1.1.1'
            - 'DNS2=1.0.0.1'
            - 'PROXY_LOCATION: pihole'
            - 'TZ=Europe/London'
            - 'VIRTUAL_HOST: pihole.${DOMAIN}'
            - 'VIRTUAL_PORT: 80'
        volumes:
            - '${CONFIG_DIR}/pihole/:/etc/pihole/'
            - '${CONFIG_DIR}/dnsmasq.d/:/etc/dnsmasq.d/'
        dns:
            - 127.0.0.1
            - 1.1.1.1
        cap_add:
            - NET_ADMIN
        depends_on:
            - traefik
        labels:
            - 'traefik.frontend.rule=Host:pihole.${DOMAIN}'
            - "traefik.frontend.rule=HostRegexp:pihole.${DOMAIN},{catchall:.*}"
            - "traefik.frontend.priority=1"
            - "traefik.backend=pihole"
            - "traefik.port=80"

    # Database
    prometheus:
        image: 'napnap75/rpi-prometheus:prometheus'
        container_name: prometheus
        restart: always
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention=10d'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        networks:
            - default
            - alfred
        ports:
            - '9090:9090'
        volumes:
            - '${CONFIG_DIR}/prometheus/etc/:/etc/prometheus/'
            - '${CONFIG_DIR}/prometheus/data/:/prometheus'
        depends_on:
            - cadvisor
            - node_exporter
        labels:
            - 'traefik.frontend.rule=Host:db.${DOMAIN}'

    # SteamCache - Blizzard
    steamcache_blizzard:
        image: 'steamcache/generic:latest'
        container_name: steamcache_blizzard
        restart: always
        networks:
            - alfred
        environment:
            - 'VIRTUAL_HOST=dist.blizzard.com,dist.blizzard.com.edgesuite.net,llnw.blizzard.com,edgecast.blizzard.com,blizzard.vo.llnwd.net,blzddist1-a.akamaihd.net,blzddist2-a.akamaihd.net,blzddist3-a.akamaihd.net,blzddist4-a.akamaihd.net,level3.blizzard.com,nydus.battle.net,edge.blizzard.top.comcast.net'
        volumes:
            - ${CONFIG_DIR}/cache/blizzard/cache:/data/cache
            - ${CONFIG_DIR}/cache/blizzard/logs:/data/logs
        labels:
            - 'traefik.frontend.rule=Host:blizzard.cache.${DOMAIN}'

    # SteamCache DNS
    steamcache_dns:
        image: 'steamcache/steamcache-dns:latest'
        container_name: steamcache_dns
        restart: always
        networks:
            - alfred
        ports:
            - '54:53/udp'
        labels:
            - 'traefik.frontend.rule=Host:dns.cache.${DOMAIN}'

    # SteamCache - Origin
    steamcache_origin:
        image: 'steamcache/generic:latest'
        container_name: steamcache_origin
        restart: always
        networks:
            - alfred
        environment:
            - 'VIRTUAL_HOST=origin-a.akamaihd.net,akamai.cdn.ea.com,lvlt.cdn.ea.com,river.data.ea.com,origin-a.akamaihd.net.edgesuite.net'
        volumes:
            - ${CONFIG_DIR}/cache/origin/cache:/data/cache
            - ${CONFIG_DIR}/cache/origin/logs:/data/logs
        labels:
            - 'traefik.frontend.rule=Host:origin.cache.${DOMAIN}'

    # SteamCache - Proxy
    steamcache_proxy:
        image: 'steamcache/sniproxy:latest'
        container_name: steamcache_proxy
        restart: always
        networks:
            - alfred
        ports:
            - '442:443/tcp'
        labels:
            - 'traefik.frontend.rule=Host:proxy.cache.${DOMAIN}'

    # SteamCache - Steam
    steamcache_steam:
        image: 'steamcache/generic:latest'
        container_name: steamcache_steam
        restart: always
        networks:
            - alfred
        environment:
            - 'VIRTUAL_HOST=*.content.steampowered.com,content1.steampowered.com,content2.steampowered.com,content3.steampowered.com,content4.steampowered.com,content5.steampowered.com,content6.steampowered.com,content7.steampowered.com,content8.steampowered.com,cs.steampowered.com,steamcontent.com,client-download.steampowered.com,*.hsar.steampowered.com.edgesuite.net,*.akamai.steamstatic.com,content-origin.steampowered.com,clientconfig.akamai.steamtransparent.com,steampipe.akamaized.net,edgecast.steamstatic.com,steam.apac.qtlglb.com.mwcloudcdn.com,*.cs.steampowered.com,*.edgecast.steamstatic.com,*.steamcontent.com,cdn1-sea1.valve.net,cdn2-sea1.valve.net,*.steam-content-dnld-1.apac-1-cdn.cqloud.com,steam.apac.qtlglb.com,edge.steam-dns.top.comcast.net,edge.steam-dns-2.top.comcast.net,steamcdn-a.akamaihd.net'
        volumes:
            - ${CONFIG_DIR}/cache/steam/cache:/data/cache
            - ${CONFIG_DIR}/cache/steam/logs:/data/logs
        labels:
            - 'traefik.frontend.rule=Host:steam.cache.${DOMAIN}'

    # SteamCache - Uplay
    steamcache_uplay:
        image: 'steamcache/generic:latest'
        container_name: steamcache_uplay
        restart: always
        networks:
            - alfred
        environment:
            - 'VIRTUAL_HOST=*.cdn.ubi.com'
        volumes:
            - ${CONFIG_DIR}/cache/uplay/cache:/data/cache
            - ${CONFIG_DIR}/cache/uplay/logs:/data/logs
        labels:
            - 'traefik.frontend.rule=Host:uplay.cache.${DOMAIN}'

    # Reverse Proxy
    traefik:
        image: 'traefik:latest'
        container_name: traefik
        restart: always
        command: '--api --docker --docker.domain=${DOMAIN}'
        networks:
            - default
            - alfred
        ports:
            - '80:80'
            - '443:443'
            - '8888:8080'
        expose:
            - 8080
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '${CONFIG_DIR}/traefik.toml:/traefik.toml'
            - '${CONFIG_DIR}/acme.json:/acme.json'
        labels:
            - 'traefik.frontend.rule=Host:proxy.${DOMAIN}'
            - traefik.port=8080
